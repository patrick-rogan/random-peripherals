n = length(delta)
ts = mean(x) - mean(y)
tstar = rep(0,b)
counter = 0
for(i in 1:b){xstar<-sample(delta,n,replace=T)
tstar[i]<-mean(xstar)
if (tstar[i] >= ts){
counter = counter + 1
}
counter = counter/b
}
return(list(counter = counter))
}
x = c(23.500, 12.000, 21.000, 22.000, 19.125, 21.500, 22.125, 20.375,
18.250, 21.625, 23.250, 21.000, 22.125, 23.000, 12.000)
y = c(17.375, 20.375, 20.000, 20.000, 18.375, 18.625, 18.625, 15.250,
16.500, 18.000, 16.250, 18.000, 12.750, 15.500, 18.000)
pairboot(x,y,3000)
pairboot <- function(x,y,b){
delta = x -mean(x) - y + mean(y)
print(delta)
n = length(delta)
ts = mean(x) - mean(y)
print(ts)
tstar = rep(0,b)
counter = 0
for(i in 1:b){xstar<-sample(delta,n,replace=T)
tstar[i]<-mean(xstar)
if (tstar[i] >= ts){
counter = counter + 1
}
counter = counter/b
}
return(list(counter = counter))
}
# Cross
x = c(23.500, 12.000, 21.000, 22.000, 19.125, 21.500, 22.125, 20.375,
18.250, 21.625, 23.250, 21.000, 22.125, 23.000, 12.000)
# Self
y = c(17.375, 20.375, 20.000, 20.000, 18.375, 18.625, 18.625, 15.250,
16.500, 18.000, 16.250, 18.000, 12.750, 15.500, 18.000)
pairboot(x,y,3000)
pairboot(x,y,10)
pairboot(x,y,100)
pairboot(y,x,100)
pairboot(y,x,1000)
pairboot(y,x,10000)
x-y
mean(x)-mean(y)
pairboot <- function(x,y,b){
delta = x - mean(x) - y + mean(y)
print(delta)
n = length(delta)
ts = mean(x) - mean(y)
print(ts)
tstar = rep(0,b)
counter = 0
for(i in 1:b){xstar<-sample(delta,n,replace=T)
tstar[i]<-mean(xstar)
if (tstar[i] >= ts){
counter = counter + 1
}
print(tstar)
counter = counter/b
}
return(list(counter = counter))
}
# Cross
x = c(23.500, 12.000, 21.000, 22.000, 19.125, 21.500, 22.125, 20.375,
18.250, 21.625, 23.250, 21.000, 22.125, 23.000, 12.000)
# Self
y = c(17.375, 20.375, 20.000, 20.000, 18.375, 18.625, 18.625, 15.250,
16.500, 18.000, 16.250, 18.000, 12.750, 15.500, 18.000)
pairboot(y,x,10000)
pairboot <- function(x,y,b){
delta = x - mean(x) - y + mean(y)
n = length(delta)
ts = mean(x) - mean(y)
tstar = rep(0,b)
counter = 0
for(i in 1:b){xstar<-sample(delta,n,replace=T)
tstar[i]<-mean(xstar)
if (tstar[i] >= ts){
counter = counter + 1
}
}
counter = counter/b
return(list(counter = counter))
}
# Cross
x = c(23.500, 12.000, 21.000, 22.000, 19.125, 21.500, 22.125, 20.375,
18.250, 21.625, 23.250, 21.000, 22.125, 23.000, 12.000)
# Self
y = c(17.375, 20.375, 20.000, 20.000, 18.375, 18.625, 18.625, 15.250,
16.500, 18.000, 16.250, 18.000, 12.750, 15.500, 18.000)
pairboot(y,x,10000)
pairboot(x,y,3000)
qt(0.5,14)
qt(0.05,14)
qt(0.95,14)
qt(0.97,14)
?qt
dt(1.76)
dt(1.76,14)
dt(1.761,14)
pt(1.761,14)
pt(2.15,14)
1-pt(2.15,14)
c(1:.1:10)
seq(1,10,0.1)
plot(beta, (y_i - beta)^2 + lambda*beta^2)
beta = seq(1,100,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
beta = seq(1,20,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
beta = seq(-5,20,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
abline(y_i/(1 + lambda))
abline(v = y_i/(1 + lambda))
beta = seq(-5,10,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
abline(v = y_i/(1 + lambda))
beta = seq(-5,5,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
abline(v = y_i/(1 + lambda))
beta = seq(-5,10,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
abline(v = y_i/(1 + lambda))
y_i/(1 + lambda)
beta = seq(-5,6.66,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
abline(v = y_i/(1 + lambda))
beta = seq(-5,7.66,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
abline(v = y_i/(1 + lambda))
beta = seq(-5,8,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
abline(v = y_i/(1 + lambda))
beta = seq(-5,9,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
abline(v = y_i/(1 + lambda))
beta = seq(-5,8.66,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2)
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = "\beta")
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression((beta)))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), text(-1,250,expression(y_1/(1+lambda))))
abline(v = y_i/(1 + lambda))
abline(v = y_i/(1 + lambda))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), text(-1,250,expression(y_i/(1+lambda))))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), text(-1,250,expression(y_{i}/(1+lambda))))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), text(-1,250,expression(y[i]/(1+lambda))))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), text(1,250,expression(y[i]/(1+lambda))))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), text(0.8,250,expression(y[i]/(1+lambda))))
abline(v = y_i/(1 + lambda))
y_i/(1 + lambda)
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), text(0.8,250,expression(y[i]/(1+lambda) = 1.6)))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), text(0.8,250,expression(y[i]/(1+lambda))))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2
text(0.8,250,expression(y[i]/(1+lambda))))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2)
text(0.8,250,expression(y[i]/(1+lambda))))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2),
text(0.8,250,expression(y[i]/(1+lambda))))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = expression(Ridge Regressio Minimization vs beta))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = expression(Ridge Regression Minimization vs beta))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = expression("Ridge Regression Minimization vs", beta))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = expression("Ridge Regression Minimization vs" beta))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(7,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(7,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(1,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(1,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(1,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
beta = seq(-5,8.66,0.1)
lambda = 5
y_i = 10
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(1,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(1,150,expression(lambda = 5)),text(1,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.1,4.1,2.1)
par(mar=c(5.1,4.1,4.1,2.1)
par(mar=c(5.1,4.1,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(1,150,expression(lambda = 5)),text(1,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.3,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(1,150,expression(lambda = 5)),text(1,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(1,150,expression(lambda = 5)),text(1,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))), text(1,150,expression(lambda = 5)),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = c("Ridge Regression Minimization vs", expression(beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = expression(paste("Ridge Regression Minimization vs", expression(beta))))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = expression(paste("Ridge Regression Minimization vs", beta))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(y[i]/(1+lambda))),
main = expression(paste("Ridge Regression Minimization vs", beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.8,250,expression(paste(beta ,"=", y[i]/(1+lambda)))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.6,250,expression(paste(hat(beta) ,"=", y[i]/(1+lambda)))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.6,250,expression(paste(hat(beta[j]^R) ,"=", y[i]/(1+lambda)))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
abline(v = y_i/(1 + lambda))
y_i/(1 + lambda)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.6,250,expression(paste(hat(beta[j]^R) ,"=", y[i]/(1+lambda),"=", 1.666))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.1,250,expression(paste(hat(beta[j]^R) ,"=", y[i]/(1+lambda),"=", 1.666))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.1,250,expression(paste(hat(beta[j]^R) ,"=", y[i]/(1+lambda),"=", 1.666))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
text(1,100,expression(lambda))
text(7,150,expression(paste(lambda,"=",5)))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.1,250,expression(paste(hat(beta[j]^R) ,"=", y[i]/(1+lambda),"=", 1.666))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
text(7,150,expression(paste(lambda,"=",5)))
text(7,125,expression(paste(y[i],"=",10)))
text(7,135,expression(paste(y[i],"=",10)))
text(7.1,135,expression(paste(y[i],"=",10)))
beta = seq(-5,8.66,0.1)
lambda = 5
y_i = 10
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.1,250,expression(paste(hat(beta[j]^R) ,"=", y[i]/(1+lambda),"=", 1.666))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
text(7,150,expression(paste(lambda,"=",5)))
text(7.1,135,expression(paste(y[i],"=",10)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*beta^2, xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*beta[j]^2),
text(0.1,250,expression(paste(hat(beta[j]^R) ,"=", y[i]/(1+lambda),"=", 5/3))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
text(7,150,expression(paste(lambda,"=",5)))
text(7.1,135,expression(paste(y[i],"=",10)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(0.1,250,expression(paste(hat(beta[j]^L) ,"=", y[i]/(1+lambda),"=", 5/3))),
main = expression(paste("Ridge Regression Minimization vs ", beta)))
text(7,150,expression(paste(lambda,"=",5)))
text(7.1,135,expression(paste(y[i],"=",10)))
abline(v = y_i/(1 + lambda))
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(0.1,250,expression(paste(hat(beta[j]^L) ,"=", y[i]/(1+lambda),"=", 5/3))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(7,150,expression(paste(lambda,"=",5)))
text(7.1,135,expression(paste(y[i],"=",10)))
abline(v = y_i/(1 + lambda))
abline(v = 0)
abline(v = y_i - lambda/2)
beta = seq(-3,11,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(0.1,250,expression(paste(hat(beta[j]^L) ,"=", y[i]/(1+lambda),"=", 5/3))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(7,150,expression(paste(lambda,"=",5)))
text(7.1,135,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(0.1,250,expression(paste(hat(beta[j]^L) ,"=", y[i]/(1+lambda),"=", 5/3))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(7,150,expression(paste(lambda,"=",5)))
text(7.1,135,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(0.1,250,expression(paste(hat(beta[j]^L) ,"=", y[i]/(1+lambda),"=", 5/3))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(7,80,expression(paste(lambda,"=",5)))
text(7.1,60,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
text(7,60,expression(paste(lambda,"=",5)))
text(7.1,45,expression(paste(y[i],"=",10)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,45,expression(paste(y[i],"=",10)))
text(14.1,55,expression(paste(y[i],"=",10)))
text(14.1,57,expression(paste(y[i],"=",10)))
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(0.1,250,expression(paste(hat(beta[j]^L) ,"=", y[i]/(1+lambda),"=", 5/3))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,58,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
text(5,90,expression(paste(hat(beta[j]^L) ,"=", y[i]/(1+lambda),"=", 5/3))),
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(5,90,expression(paste(hat(beta[j]^L) ,"=", y[i]/(1+lambda),"=", 5/3))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,57,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(5,90,expression(paste(hat(beta[j]^L) ,"=", y[i]-lambda/2,"=", 15/2))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,57,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(6,90,expression(paste(hat(beta[j]^L) ,"=", y[i]-lambda/2,"=", 15/2))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,57,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(6,90,expression(paste(hat(beta[j]^L) ,"=", y[i]-lambda/2,"=", 15/2))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(6,58,expression(paste("as",y[i], ">",lambda/2)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,57,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
text(6,88,expression(paste("as",y[i], ">",lambda/2)))
text(6,86,expression(paste("as",y[i], ">",lambda/2)))
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(6,90,expression(paste(hat(beta[j]^L) ,"=", y[i]-lambda/2,"=", 15/2))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(6,87,expression(paste("as",y[i], ">",lambda/2)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,57,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(6,90,expression(paste(hat(beta[j]^L) ,"=", y[i]-lambda/2,"=", 15/2))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(6,87,expression(paste("as ",y[i], ">",lambda/2)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,57,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(6,90,expression(paste(hat(beta[j]^L) ,"=", y[i]-lambda/2,"=", 15/2))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(6,88,expression(paste("as ",y[i], ">",lambda/2)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,57,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
beta = seq(2,15,0.1)
par(mar=c(5.1,4.7,4.1,2.1))
plot(beta, (y_i - beta)^2 + lambda*abs(beta), xlab = expression(beta), ylab = expression((y[i]-beta[j])^2-lambda*abs(beta[j])),
text(6,90,expression(paste(hat(beta[j]^L) ,"=", y[i]-lambda/2,"=", 15/2))),
main = expression(paste("Lasso Minimization vs ", beta)))
text(6,86,expression(paste("as ",y[i], ">",lambda/2)))
text(14,60,expression(paste(lambda,"=",5)))
text(14.1,57,expression(paste(y[i],"=",10)))
abline(v = y_i - lambda/2)
X2
X2eps = rnorm(1000, mean = 0, sd = 0.25)
betaVect = c(0,1,4,0,15,1,6,1,1,7,8,3,4,2,2,1,7,11,0)
x = rep(0,1000,20)
?rep
x = rep(0,c(1000,20))
x = matrix(0,c(1000,20))
View(x)
x = matrix(0,nrow = 1000, ncol = 20))
x = matrix(0,nrow = 1000, ncol = 20)
View(x)
meanVec = c(0,1,0,0.25,1,4,1,0,5,1,2,0.75,2,3)
meanVec = c(0,1,0,0.25,1,4,1,0,5,1,2,0.75,2,3,1,2,7,3)
sdVec = c(1,.7,1,2,.5,.2,.8,.1,.2,3,2,5,1,2,3,1.1,2.4,2.1,1,0.2)
?set.seed
set.seed(1)
X = matrix(0,nrow = 1000, ncol = 20)
meanVec = c(0,1,0,0.25,1,4,1,0,5,1,2,0.75,2,3,1,2,7,3,0.9,2)
sdVec = c(1,.7,1,2,.5,.2,.8,.1,.2,3,2,5,1,2,3,1.1,2.4,2.1,1,0.2)
eps = rnorm(1000, mean = 0, sd = 0.25)
betaVect = c(0,1,4,0,11,1,6,1,1,7,0,3,4,2,2,1,7,9,0,8)
beta0 = 3
Y = beta0 + eps
for (i in 1:20){
X[,i] = rnorm(100, mean = meanVec[i], sd = sdVec[i])
Y = Y + betaVect[i]*X[,i]
}
simDat = data.frame(Y,X)
View(simDat)
betaVect[1]*X[,1]
train.ix = as.integer(createDataPartition(simDat[,1], p = .8, list = FALSE, times = 1))
library(caret)
train.ix = as.integer(createDataPartition(simDat[,1], p = .8, list = FALSE, times = 1))
train.ix
train.ix = as.integer(createDataPartition(simDat[,1], p = .8, list = FALSE, times = 1))
train = rep(FALSE,length(crim01))
train[train.ix] = TRUE
train.ix = as.integer(createDataPartition(simDat[,1], p = .8, list = FALSE, times = 1))
train = rep(FALSE,length(simDat[,1]))
train[train.ix] = TRUE
simDat.test = simDat[!train,]
View(simDat.test)
