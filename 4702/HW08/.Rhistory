displacement:acceleration+acceleration+year+origin, data = Auto)
summary(mMPGwInt2)
mMPGwInt2 = lm(mpg ~ cylinders*displacement+horsepower*weight+
displacement:acceleration+acceleration+year+origin, data = Auto)
summary(mMPGwInt2)
mMPGwInt2 = lm(mpg ~ cylinders+displacement+horsepower*weight+
displacement:acceleration+acceleration+year+origin, data = Auto)
summary(mMPGwInt2)
plot(mMPGwInt2)
nlMPG = lm(mpg ~ cylinders + log(displacement),data = Auto)
summary(nlMPG)
nlMPG = lm(mpg ~ cylinders + log(displacement) + I(horsepower^2) +
weight + acceleration + year + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
nlMPG = lm(mpg ~ cylinders + log(displacement) + +horsepower + I(horsepower^2) +
weight + acceleration + year + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
nlMPG = lm(mpg ~ cylinders + displacement + log(displacement) + +horsepower + I(horsepower^2) +
weight + acceleration + year + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
nlMPG = lm(mpg ~ cylinders + displacement + log(displacement) + +horsepower + I(horsepower^2) +
+ weight + log(weight) + acceleration + year + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
nlMPG = lm(mpg ~ cylinders + displacement + log(displacement) + +horsepower  +
+ weight + log(weight) + acceleration + year + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
nlMPG = lm(mpg ~ cylinders + displacement + log(displacement) + horsepower  +
weight + log(weight) + acceleration + year + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
nlMPG = lm(mpg ~ cylinders + I(cylinders^2)+ displacement + log(displacement) + horsepower  +
weight + log(weight) + acceleration + year + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
nlMPG = lm(mpg ~ cylinders + displacement + log(displacement) + horsepower  +
weight + log(weight) + acceleration + year +I(year^2) + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
nlMPG = lm(mpg ~ cylinders + displacement + log(displacement) + horsepower  +
weight + log(weight) + acceleration + year +I(year^3) + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
nlMPG = lm(mpg ~ cylinders + displacement + log(displacement) + horsepower +log(horsepower)  +
weight + log(weight) + acceleration + year +I(year^2) + origin,data = Auto)
summary(nlMPG)
plot(nlMPG)
rm(list = ls())
library("ISLR")
library(ISLR)
exit
library(ISLR)
fix(Carseats)
names(Carseats)
mLMC = lm(Sales ~ Price + Urban + US, data = Carseats)
summary(mLMC)
mLMC2 = lm(Sales ~ Price + US, data = Carseats)
summary(mLMC2)
mLMC = lm(Sales ~ Price + Urban + US, data = Carseats)
summary(mLMC)
mLMC2 = lm(Sales ~ Price + US, data = Carseats)
summary(mLMC2)
summary(mLMC)
US
library(ISLR)
Carseats$US
Carseats?
?Carseats
levels(Carseats$US)
?factor
rm(list = ls())
library(ISLR)
attach(Carseats)
mLMC = lm(Sales ~ Price + Urban + US, data = Carseats)
summary(mLMC)
mLMC2 = lm(Sales ~ Price + US, data = Carseats)
summary(mLMC2)
contrasts(US)
contrasts(Urban)
?Carseats
pairs(Auto)
options(digits = 4)
cor(Auto[,-9])
multiMPG = lm(mpg ~ cylinders + displacement + horsepower + weight +
acceleration + year + origin, data = Auto)
summary(multiMPG)
multiMPG2 = lm(mpg ~ cylinders + displacement + horsepower + weight +
acceleration + origin, data = Auto)
summary(multiMPG2)
plot(multiMPG)
cor(cylinders+displacement)
cor(Auto$cylinders+Auto$displacement)
cor(Auto$cylinders,Auto$displacement)
cor(Auto$cylinders,Auto$displacement,Auto$horsepower,Auto$weight)
cor(data.frame(Auto$cylinders,Auto$displacement,Auto$horsepower,Auto$weight)
cor(data.frame(Auto$cylinders,Auto$displacement,Auto$horsepower,Auto$weight))
cor(data.frame(Auto$cylinders,Auto$displacement,Auto$horsepower,Auto$weight,
Auto$acceleration,Auto$year,Auto$origin))
cor(Auto[,-9])
confint(mLMC2)
plot(mLMC2)
plot(mLMC2)
par(mfrow = c(2,2))
plot(mLMC2)
length(US)
(2 + 1)/length(US)
set.seed(1)
x = rnorm(100)
y = 2*x + rnorm(100)
lm(y~x+0)
summary(noI)
noI = lm(y~x+0)
summary(noI)
plot(x,y)
?lm
noII = lm(x~y+0)
summary(noII)
plot(y,x)
5*.3911
IM = lm(x~y)
IMI = lm(y~x)
summary(IM).coefficients
summary(IM)$coefficients
summary(IM)$coefficients[0]
summary(IM)$coefficients[1]
x = summary(IM)$coefficients[1] == summary(IM2)$coefficients[1]
x = summary(IM)$coefficients[1] == summary(IMI)$coefficients[1]
x
summary(IM)$coefficients[7]
summary(IM)$coefficients[9]
summary(IM)$coefficients[6]
x = summary(IM)$coefficients[6] == summary(IMI)$coefficients[6]
x
summary(IMI)$coefficients[6]
summary(IM)$coefficients[6]
x = summary(IM)$coefficients[6] - summary(IMI)$coefficients[6]
x
summary(IM)$coefficients[6] - summary(IMI)$coefficients[6]
x*%*y
x*.*y
x%*%y
x%*%t(y)
t(x)%*%y
x
y
x
set.seed(1)
x = rnorm(100)
y = 2*x + rnorm(100)
noI = lm(y~x+0)
summary(noI)
noII = lm(x~y+0)
summary(noII)
x
x%*%y
tstat = sqrt(length(x)-1)*x%*%y/
sqrt(x%*%x*y%*%y-(x%*%y)^2)
?rnorm
set.seed(1)
X = rnorm(100) # N(0,1) default
hist(X)
eps = rnorm(100, mean = 0, sd = 0.25)
hist(eps)
Y = -1 + 0.5*X + eps
hist(Y)
plot(Y)
length(Y)
plot(X,Y)
rm(list=ls())
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 0.25)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
set.seed(1)
X = rnorm(100) # N(0,1) default
set.seed(1)
eps = rnorm(100, mean = 0, sd = 0.25)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 0.25)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
eps = rnorm(100, mean = 0, sd = 0.25)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
set.seed(1)
X = rnorm(100) # N(0,1) default
set.seed(1)
eps = rnorm(100, mean = 0, sd = 0.25)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 0.25)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
eps = rnorm(100, mean = 0, sd = 0.25)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 0.25)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
quadXY = lm(Y ~ I(X^2))
summary(quadXY)
quadXY = lm(Y ~ X + I(X^2))
summary(quadXY)
regYX = lm(Y ~ X)
summary(regYX)
quadXY = lm(Y ~ X + I(X^2))
summary(quadXY)
plot(xT,yT,col=snow2)
xT = c(-5:5)
yT = -1 + 0.5*xT
plot(xT,yT,col=snow2)
plot(xT,yT,col="snow2")
xT = c(-5:0.1:5)
xT = c(-5:0.1:5)
xT = c(-5:5)
yT = -1 + 0.5*xT
plot(xT,yT,col="snow2")
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
xT = c(-5:5)
yT = -1 + 0.5*xT
plot(xT,yT,col="snow2")
lines(xT,yT,col="snow2")
lines(xT,yT,col="snow4")
plot(X,Y,main="Y vs X")
lines(xT,yT,col="snow4")
predict(regYX)
lines(regYX,col="gray0")
lines(predict(regYX),col="black")
abline(regXY,col="black")
regYX = lm(Y ~ X)
summary(regYX)
abline(regXY,col="black")
abline(regYX,col="black")
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black")
xT = c(-5:5)
yT = -1 + 0.5*xT
lines(xT,yT,col="snow4")
lines(xT,yT,col="cyan")
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black")
xT = c(-5:5)
yT = -1 + 0.5*xT
abline(-1,0.5,col = "cyan")
legend()
?legend
legend(left,top)
legend("left","top")
legend(c("left","top"))
legend(1,leg.txt)
leg.txt = c("Population Line","Fitted Line")
legend(1,leg.txt)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black")
abline(-1,0.5,col = "cyan")
leg.txt = c("Population Line","Fitted Line")
legend(1,leg.txt)
legend(-2,leg.txt)
legend(2,leg.txt)
leg.txt = c("Population Line","Fitted Line")
legend(2,leg.txt)
legend(-2,y=0,leg.txt)
legend(-2,y=0,leg.txt,lty=c(1,1)
legend(-2,y=0,leg.txt,lty=c(1,1))
lty=c(1,1)
lwd=c(2.5,2.5),col=c(“blue”,”red”))
lty=c(1,1)
lwd=c(2.5,2.5)
col=c(“blue”,”red”))
legend(-2,y=0,leg.txt)
lty=c(1,1)
lwd=c(2.5,2.5)
col=c(“blue”,”red”)
leg.txt = c("Population Line","Fitted Line")
legend(-2,y=0,leg.txt)
lty=c(1,1)
lwd=c(2.5,2.5)
col=c("blue","red")
legend(-2,y=0,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("blue","red"))
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Fitted Line","Population Line")
legend(-2,y=0,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Least Squares Line","Population Line")
legend(-2,y=0,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
quadXY = lm(Y ~ X + I(X^2))
summary(quadXY)
regYX = lm(Y ~ X)
summary(regYX)
quadXY = lm(Y ~ X + I(X^2))
summary(quadXY)
0.783 - 0.778
?rnorm
.05^2
# h
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 0.05)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Least Squares Line","Population Line")
legend(-2,y=0,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
# i
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 2)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Least Squares Line","Population Line")
legend(-2,y=0,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 0.05)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Least Squares Line","Population Line")
legend(-2,y=0,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 0.05)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
(-1.00188+1)
(-1.00188+1)*100
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Least Squares Line","Population Line")
legend(-2,y=0,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 2)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Least Squares Line","Population Line")
legend(-2,y=4,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
confint(regXY)
confint(regYX)
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 0.25)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Least Squares Line","Population Line")
legend(-2,y=0,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
quadXY = lm(Y ~ X + I(X^2))
summary(quadXY)
confint(regYX)
# h
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 0.05)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Least Squares Line","Population Line")
legend(-2,y=0,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
confint(regYX)
# i
set.seed(1)
X = rnorm(100) # N(0,1) default
eps = rnorm(100, mean = 0, sd = 2)
Y = -1 + 0.5*X + eps
length(Y)
plot(X,Y,main="Y vs X")
regYX = lm(Y ~ X)
summary(regYX)
abline(regYX,col="black",lwd=c(2.5,2.5))
abline(-1,0.5,col = "cyan",lwd=c(2.5,2.5))
leg.txt = c("Least Squares Line","Population Line")
legend(-2,y=4,leg.txt,
lty=c(1,1),
lwd=c(2.5,2.5),
col=c("black","cyan"))
confint(regYX)
rm(list=ls())
set.seed(1)
x1 = runif(100)
x2 =0.5*x1 + rnorm(100)/10
y = 2 + 2*x1 + 0.3*x2 + rnorm(100)
plot(x,y)
hist(y)
runif(100)
?runif(100)
plot(x1,x2)
plot(x1,x2, main="x2 vs x1")
source('~/Desktop/STAT4702/HW10/HW10_Rogan_rcode.R', echo=TRUE)
source('~/Desktop/STAT4702/HW10/HW10_Rogan_rcode.R', echo=TRUE)
library(ISLR)
attach(Default)
colnames(Default)
glm.fit = glm(default ~ income + balance, family = binomial, data = Default)
summary(glm.fit)
glm.fit = glm(default ~ income + balance, family = binomial, data = Default)
summary(glm.fit)
set.seet(1)
glm.fit = glm(default ~ income + balance, family = binomial, data = Default)
library(class)
set.seet(1)
library(MASS)
set.seet(1)
set.seed(1)
